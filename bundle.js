(function (d3) {
  'use strict';

  const svg = d3.select('svg');

  const width  = +svg.attr('width');
  const height = +svg.attr('height');

  const render = data => {
    const xValue = d => d.Count;
    const yValue = d => d.Dog_Name;
    const margin = {top: 40, right: 20, bottom: 80, left: 110};
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleLinear()
    	.domain([0, d3.max(data, xValue)])
    	.range([0, innerWidth]);
    
    const yScale = d3.scaleBand()
    	.domain(data.map(yValue))
    	.range([0, innerHeight])
    	.padding(0.1);
    
    const g = svg.append('g')
    	.attr('transform', `translate(${margin.left},${margin.top})`);
    
    const xAxis = d3.axisBottom(xScale)
    	.tickSize(-innerHeight + 10);
    
  	g.append('g')
      .call(d3.axisLeft(yScale))
    	.selectAll('.domain, .tick line')
    		.remove();
    
    const xAxisG = g.append('g').call(xAxis)
    	.attr('transform', `translate(0,${innerHeight})`);
    
    xAxisG.selectAll('.domain').remove();
    
    xAxisG.append('text')
    .attr('class', 'axis-label')
    .attr('y', 45)
    .attr('fill', 'black')
    .text('Count of Dog Names')
    .attr('x', innerWidth / 2);
    
  	g.selectAll('rect').data(data)
    	.enter().append('rect')
    		.attr('y', d => yScale(yValue(d)))
    		.attr('width', d => xScale(xValue(d)))
    		.attr('height', yScale.bandwidth());
    
    
    g.append('text')
    	.attr('class', 'title')
    	.attr('y', -10)
    	.attr('x', 60)
  		.text('Top 10 Most Popular Dog Names in NYC');
  };

  d3.csv('data.csv').then(data => {
    data.forEach(d => {
      d.Count = +d.Count;
    });
  	render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxuICBzZWxlY3QsIFxuICBjc3YsIFxuICBzY2FsZUxpbmVhcixcbiAgbWF4LCBcbiAgc2NhbGVCYW5kLCBcbiAgYXhpc0xlZnQsXG4gIGF4aXNCb3R0b20sXG4gIGZvcm1hdFxufSBmcm9tICdkMyc7XG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnc3ZnJyk7XG5cbmNvbnN0IHdpZHRoICA9ICtzdmcuYXR0cignd2lkdGgnKVxuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcblxuY29uc3QgcmVuZGVyID0gZGF0YSA9PiB7XG4gIGNvbnN0IHhWYWx1ZSA9IGQgPT4gZC5Db3VudDtcbiAgY29uc3QgeVZhbHVlID0gZCA9PiBkLkRvZ19OYW1lO1xuICBjb25zdCBtYXJnaW4gPSB7dG9wOiA0MCwgcmlnaHQ6IDIwLCBib3R0b206IDgwLCBsZWZ0OiAxMTB9O1xuICBjb25zdCBpbm5lcldpZHRoID0gd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgY29uc3QgaW5uZXJIZWlnaHQgPSBoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgXG4gIGNvbnN0IHhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgXHQuZG9tYWluKFswLCBtYXgoZGF0YSwgeFZhbHVlKV0pXG4gIFx0LnJhbmdlKFswLCBpbm5lcldpZHRoXSk7XG4gIFxuICBjb25zdCB5U2NhbGUgPSBzY2FsZUJhbmQoKVxuICBcdC5kb21haW4oZGF0YS5tYXAoeVZhbHVlKSlcbiAgXHQucmFuZ2UoWzAsIGlubmVySGVpZ2h0XSlcbiAgXHQucGFkZGluZygwLjEpO1xuICBcbiAgY29uc3QgZyA9IHN2Zy5hcHBlbmQoJ2cnKVxuICBcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XG4gIFxuICBjb25zdCB4QXhpc1RpY2tGb3JtYXQgPSBudW1iZXIgPT5cbiAgXHRmb3JtYXQoJycpKG51bWJlcilcbiAgXHRcdC5yZXBsYWNlKCdHJywgJ0InKVxuICBcbiAgY29uc3QgeEF4aXMgPSBheGlzQm90dG9tKHhTY2FsZSlcbiAgXHQudGlja1NpemUoLWlubmVySGVpZ2h0ICsgMTApXG4gIFxuXHRnLmFwcGVuZCgnZycpXG4gICAgLmNhbGwoYXhpc0xlZnQoeVNjYWxlKSlcbiAgXHQuc2VsZWN0QWxsKCcuZG9tYWluLCAudGljayBsaW5lJylcbiAgXHRcdC5yZW1vdmUoKVxuICBcbiAgY29uc3QgeEF4aXNHID0gZy5hcHBlbmQoJ2cnKS5jYWxsKHhBeGlzKVxuICBcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYClcbiAgXG4gIHhBeGlzRy5zZWxlY3RBbGwoJy5kb21haW4nKS5yZW1vdmUoKTtcbiAgXG4gIHhBeGlzRy5hcHBlbmQoJ3RleHQnKVxuICAuYXR0cignY2xhc3MnLCAnYXhpcy1sYWJlbCcpXG4gIC5hdHRyKCd5JywgNDUpXG4gIC5hdHRyKCdmaWxsJywgJ2JsYWNrJylcbiAgLnRleHQoJ0NvdW50IG9mIERvZyBOYW1lcycpXG4gIC5hdHRyKCd4JywgaW5uZXJXaWR0aCAvIDIpXG4gIFxuXHRnLnNlbGVjdEFsbCgncmVjdCcpLmRhdGEoZGF0YSlcbiAgXHQuZW50ZXIoKS5hcHBlbmQoJ3JlY3QnKVxuICBcdFx0LmF0dHIoJ3knLCBkID0+IHlTY2FsZSh5VmFsdWUoZCkpKVxuICBcdFx0LmF0dHIoJ3dpZHRoJywgZCA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKCdoZWlnaHQnLCB5U2NhbGUuYmFuZHdpZHRoKCkpXG4gIFxuICBcbiAgZy5hcHBlbmQoJ3RleHQnKVxuICBcdC5hdHRyKCdjbGFzcycsICd0aXRsZScpXG4gIFx0LmF0dHIoJ3knLCAtMTApXG4gIFx0LmF0dHIoJ3gnLCA2MClcblx0XHQudGV4dCgnVG9wIDEwIE1vc3QgUG9wdWxhciBEb2cgTmFtZXMgaW4gTllDJylcbn07XG5cbmNzdignZGF0YS5jc3YnKS50aGVuKGRhdGEgPT4ge1xuICBkYXRhLmZvckVhY2goZCA9PiB7XG4gICAgZC5Db3VudCA9ICtkLkNvdW50O1xuICB9KTtcblx0cmVuZGVyKGRhdGEpO1xufSk7Il0sIm5hbWVzIjpbInNlbGVjdCIsInNjYWxlTGluZWFyIiwibWF4Iiwic2NhbGVCYW5kIiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0IiwiY3N2Il0sIm1hcHBpbmdzIjoiOzs7RUFXQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDOztFQUUxQixNQUFNLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFDO0VBQ2pDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7RUFFbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJO0lBQ3JCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzVCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQy9CLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzNELE1BQU0sVUFBVSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDdEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7SUFFeEQsTUFBTSxNQUFNLEdBQUdDLGNBQVcsRUFBRTtNQUMxQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVDLE1BQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztNQUM5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